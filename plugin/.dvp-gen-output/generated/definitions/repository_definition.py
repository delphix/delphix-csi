#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class RepositoryDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username=None, kubectl=None, name=None, apiendpoint=None, cluster=None, version=None, context=None, validate=True):
        """RepositoryDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param username: The username of this RepositoryDefinition.
            :type username: str
            :param kubectl: The kubectl of this RepositoryDefinition.
            :type kubectl: str
            :param name: The name of this RepositoryDefinition.
            :type name: str
            :param apiendpoint: The apiendpoint of this RepositoryDefinition.
            :type apiendpoint: str
            :param cluster: The cluster of this RepositoryDefinition.
            :type cluster: str
            :param version: The version of this RepositoryDefinition.
            :type version: str
            :param context: The context of this RepositoryDefinition.
            :type context: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'username': str,
            'kubectl': str,
            'name': str,
            'apiendpoint': str,
            'cluster': str,
            'version': str,
            'context': str
        }

        self.attribute_map = {
            'username': 'username',
            'kubectl': 'kubectl',
            'name': 'name',
            'apiendpoint': 'apiendpoint',
            'cluster': 'cluster',
            'version': 'version',
            'context': 'context'
        }
        
        # Validating the attribute username and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'username',
                                                          username,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._username = username

        # Validating the attribute kubectl and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'kubectl',
                                                          kubectl,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._kubectl = kubectl

        # Validating the attribute name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._name = name

        # Validating the attribute apiendpoint and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'apiendpoint',
                                                          apiendpoint,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._apiendpoint = apiendpoint

        # Validating the attribute cluster and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'cluster',
                                                          cluster,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._cluster = cluster

        # Validating the attribute version and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'version',
                                                          version,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._version = version

        # Validating the attribute context and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'context',
                                                          context,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._context = context
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The repositoryDefinition of this RepositoryDefinition.
        :rtype: RepositoryDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this RepositoryDefinition.

        Username used to authenticate to Kubernetes API

        :return: The username of this RepositoryDefinition.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RepositoryDefinition.

        Username used to authenticate to Kubernetes API

        :param username: The username of this RepositoryDefinition.
        :type username: str
        """
        # Validating the attribute username and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'username',
                                                          username,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._username = username

    @property
    def kubectl(self):
        """Gets the kubectl of this RepositoryDefinition.

        Path for kubectl binary

        :return: The kubectl of this RepositoryDefinition.
        :rtype: str
        """
        return self._kubectl

    @kubectl.setter
    def kubectl(self, kubectl):
        """Sets the kubectl of this RepositoryDefinition.

        Path for kubectl binary

        :param kubectl: The kubectl of this RepositoryDefinition.
        :type kubectl: str
        """
        # Validating the attribute kubectl and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'kubectl',
                                                          kubectl,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._kubectl = kubectl

    @property
    def name(self):
        """Gets the name of this RepositoryDefinition.


        :return: The name of this RepositoryDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryDefinition.


        :param name: The name of this RepositoryDefinition.
        :type name: str
        """
        # Validating the attribute name and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._name = name

    @property
    def apiendpoint(self):
        """Gets the apiendpoint of this RepositoryDefinition.

        Kubernetes API Endpoint

        :return: The apiendpoint of this RepositoryDefinition.
        :rtype: str
        """
        return self._apiendpoint

    @apiendpoint.setter
    def apiendpoint(self, apiendpoint):
        """Sets the apiendpoint of this RepositoryDefinition.

        Kubernetes API Endpoint

        :param apiendpoint: The apiendpoint of this RepositoryDefinition.
        :type apiendpoint: str
        """
        # Validating the attribute apiendpoint and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'apiendpoint',
                                                          apiendpoint,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._apiendpoint = apiendpoint

    @property
    def cluster(self):
        """Gets the cluster of this RepositoryDefinition.

        Kubernetes Cluster Name (as configured in kubeconfig)

        :return: The cluster of this RepositoryDefinition.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RepositoryDefinition.

        Kubernetes Cluster Name (as configured in kubeconfig)

        :param cluster: The cluster of this RepositoryDefinition.
        :type cluster: str
        """
        # Validating the attribute cluster and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'cluster',
                                                          cluster,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._cluster = cluster

    @property
    def version(self):
        """Gets the version of this RepositoryDefinition.

        Kubernetes Version

        :return: The version of this RepositoryDefinition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RepositoryDefinition.

        Kubernetes Version

        :param version: The version of this RepositoryDefinition.
        :type version: str
        """
        # Validating the attribute version and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'version',
                                                          version,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._version = version

    @property
    def context(self):
        """Gets the context of this RepositoryDefinition.

        Kubectl Context Name (username@cluster)

        :return: The context of this RepositoryDefinition.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this RepositoryDefinition.

        Kubectl Context Name (username@cluster)

        :param context: The context of this RepositoryDefinition.
        :type context: str
        """
        # Validating the attribute context and then saving it.
        type_error = GeneratedClassesTypeError.type_error(RepositoryDefinition,
                                                          'context',
                                                          context,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._context = context
