#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class VirtualSourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mount_location='', persistent_volume_claim='', namespace='', persistent_volume='', validate=True):
        """VirtualSourceDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param mount_location: The mount_location of this VirtualSourceDefinition.
            :type mount_location: str
            :param persistent_volume_claim: The persistent_volume_claim of this VirtualSourceDefinition.
            :type persistent_volume_claim: str
            :param namespace: The namespace of this VirtualSourceDefinition.
            :type namespace: str
            :param persistent_volume: The persistent_volume of this VirtualSourceDefinition.
            :type persistent_volume: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'mount_location': str,
            'persistent_volume_claim': str,
            'namespace': str,
            'persistent_volume': str
        }

        self.attribute_map = {
            'mount_location': 'mount_location',
            'persistent_volume_claim': 'persistent_volume_claim',
            'namespace': 'namespace',
            'persistent_volume': 'persistent_volume'
        }
        
        # Validating the attribute mount_location and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._mount_location = mount_location

        # Validating the attribute persistent_volume_claim and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'persistent_volume_claim',
                                                          persistent_volume_claim,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._persistent_volume_claim = persistent_volume_claim

        # Validating the attribute namespace and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'namespace',
                                                          namespace,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._namespace = namespace

        # Validating the attribute persistent_volume and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'persistent_volume',
                                                          persistent_volume,
                                                          str,
                                                          False)
        if validate and type_error:
            raise type_error
        self._persistent_volume = persistent_volume
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The virtualSourceDefinition of this VirtualSourceDefinition.
        :rtype: VirtualSourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_location(self):
        """Gets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :return: The mount_location of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._mount_location

    @mount_location.setter
    def mount_location(self, mount_location):
        """Sets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :param mount_location: The mount_location of this VirtualSourceDefinition.
        :type mount_location: str
        """
        # Validating the attribute mount_location and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._mount_location = mount_location

    @property
    def persistent_volume_claim(self):
        """Gets the persistent_volume_claim of this VirtualSourceDefinition.

        Kubernetes Persistent Volume Claim Name

        :return: The persistent_volume_claim of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim):
        """Sets the persistent_volume_claim of this VirtualSourceDefinition.

        Kubernetes Persistent Volume Claim Name

        :param persistent_volume_claim: The persistent_volume_claim of this VirtualSourceDefinition.
        :type persistent_volume_claim: str
        """
        # Validating the attribute persistent_volume_claim and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'persistent_volume_claim',
                                                          persistent_volume_claim,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._persistent_volume_claim = persistent_volume_claim

    @property
    def namespace(self):
        """Gets the namespace of this VirtualSourceDefinition.

        Kubernetes PV/PVC Namespace

        :return: The namespace of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this VirtualSourceDefinition.

        Kubernetes PV/PVC Namespace

        :param namespace: The namespace of this VirtualSourceDefinition.
        :type namespace: str
        """
        # Validating the attribute namespace and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'namespace',
                                                          namespace,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._namespace = namespace

    @property
    def persistent_volume(self):
        """Gets the persistent_volume of this VirtualSourceDefinition.

        Kubernetes Persistent Volume Name

        :return: The persistent_volume of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._persistent_volume

    @persistent_volume.setter
    def persistent_volume(self, persistent_volume):
        """Sets the persistent_volume of this VirtualSourceDefinition.

        Kubernetes Persistent Volume Name

        :param persistent_volume: The persistent_volume of this VirtualSourceDefinition.
        :type persistent_volume: str
        """
        # Validating the attribute persistent_volume and then saving it.
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'persistent_volume',
                                                          persistent_volume,
                                                          str,
                                                          False)
        if type_error:
            raise type_error
        self._persistent_volume = persistent_volume
