# Install the CSI Driver. This simplifies driver discovery and enables us to
# customize Kubernetes behavior
# https://kubernetes-csi.github.io/docs/csi-driver-object.html
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: defs.csi.delphix.com
spec:
  attachRequired: true
  podInfoOnMount: true

---

##############################################
###########                       ############
###########     Snapshot CRDs     ############
###########                       ############
##############################################

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshotclasses.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotClass
    plural: volumesnapshotclasses
  scope: Cluster
  version: v1alpha1
  subresources:
    status: {}

---

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshotcontents.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotContent
    plural: volumesnapshotcontents
  scope: Cluster
  version: v1alpha1

---

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshots.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshot
    plural: volumesnapshots
  scope: Namespaced
  version: v1alpha1
  subresources:
    status: {}

---

kind: VolumeSnapshotClass
apiVersion: snapshot.storage.k8s.io/v1alpha1
metadata:
  name: de-fs-storage
  namespace: kube-system
  annotations:
    snapshot.storage.kubernetes.io/is-default-class: "true"
snapshotter: defs.csi.delphix.com

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: de-fs-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: defs.csi.delphix.com
allowVolumeExpansion: true

---

##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-de-controller
  namespace: kube-system
spec:
  serviceName: "csi-de"
  selector:
    matchLabels:
      app: csi-de-controller
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-de-controller
        role: csi-de
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: csi-de-controller-sa
      containers:
        - name: csi-provisioner
          image: delphix/csi-provisioner:v1.6.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--extra-create-metadata=true"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          image: quay.io/k8scsi/csi-attacher:v2.0.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: quay.io/k8scsi/csi-snapshotter:v1.2.2
          args:
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-resizer
          image: quay.io/k8scsi/csi-resizer:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--csiTimeout=30s"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-de-plugin
          image: delphix/delphix-csi:v0.0.2
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--password=$(DELPHIX_ACCESS_PASSWORD)"
            - "--username=$(DELPHIX_ACCESS_USERNAME)"
            - "--url=$(DELPHIX_URL)"
            - "--envName=$(DELPHIX_ENVIRONMENT_NAME)"
            - "--repositoryName=$(DELPHIX_REPOSITORY_NAME)"
            - "--sourceRef=$(DELPHIX_SOURCE_REF)"
            - "--groupName=$(DELPHIX_GROUP_NAME)"
            - "--mountPath=$(DELPHIX_MOUNT_PATH)"
            - "--nodeid=$(NODE_ID)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: DELPHIX_URL
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: engineUrl
            - name: DELPHIX_ENVIRONMENT_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: envName
            - name: DELPHIX_GROUP_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: groupName
            - name: DELPHIX_REPOSITORY_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: repoName
            - name: DELPHIX_SOURCE_REF
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: sourceRef
            - name: DELPHIX_MOUNT_PATH
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: mountPath
            - name: DELPHIX_ACCESS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: delphix-creds
                  key: password
            - name: DELPHIX_ACCESS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: delphix-creds
                  key: username
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: "Always"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: csi-de-controller-sa
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-de-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-de-provisioner-role
  apiGroup: rbac.authorization.k8s.io

---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-attacher-binding
subjects:
  - kind: ServiceAccount
    name: csi-de-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-de-attacher-role
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-snapshotter-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete", "get", "update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-snapshotter-binding
subjects:
  - kind: ServiceAccount
    name: csi-de-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-de-snapshotter-role
  apiGroup: rbac.authorization.k8s.io

---

# Resizer must be able to work with PVCs, PVs, SCs.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-resizer-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-resizer-binding
subjects:
  - kind: ServiceAccount
    name: csi-de-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-de-resizer-role
  apiGroup: rbac.authorization.k8s.io

---

########################################
###########                 ############
###########   Node plugin   ############
###########                 ############
########################################

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-de-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-de-node
  template:
    metadata:
      labels:
        app: csi-de-node
        role: csi-de
    spec:
      priorityClassName: system-node-critical
      serviceAccount: csi-de-node-sa
      hostNetwork: true
      initContainers:
        # Delete automount udev rule running on all DO droplets. The rule mounts
        # devices briefly and may conflict with CSI-managed droplets (leading to
        # "resource busy" errors). We can safely delete it in DOKS.
        - name: automount-udev-deleter
          image: alpine:3
          args:
            - "rm"
            - "-f"
            - "/etc/udev/rules.d/99-delphix-automount.rules"
          volumeMounts:
            - name: udev-rules-dir
              mountPath: /etc/udev/rules.d/
      containers:
        - name: csi-node-driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.1.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/defs.csi.delphix.com /registration/defs.csi.delphix.com-reg.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/defs.csi.delphix.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: csi-de-plugin
          image: delphix/delphix-csi:v0.0.2
          args :           
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--password=$(DELPHIX_ACCESS_PASSWORD)"
            - "--username=$(DELPHIX_ACCESS_USERNAME)"
            - "--url=$(DELPHIX_URL)"
            - "--envName=$(DELPHIX_ENVIRONMENT_NAME)"
            - "--repositoryName=$(DELPHIX_REPOSITORY_NAME)"
            - "--sourceRef=$(DELPHIX_SOURCE_REF)"
            - "--groupName=$(DELPHIX_GROUP_NAME)"
            - "--mountPath=$(DELPHIX_MOUNT_PATH)"
            - "--nodeid=$(NODE_ID)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: DELPHIX_URL
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: engineUrl
            - name: DELPHIX_ENVIRONMENT_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: envName
            - name: DELPHIX_GROUP_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: groupName
            - name: DELPHIX_REPOSITORY_NAME
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: repoName
            - name: DELPHIX_SOURCE_REF
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: sourceRef
            - name: DELPHIX_MOUNT_PATH
              valueFrom:
                configMapKeyRef: 
                  name: delphix-config
                  key: mountPath
            - name: DELPHIX_ACCESS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: delphix-creds
                  key: password
            - name: DELPHIX_ACCESS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: delphix-creds
                  key: username
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/defs.csi.delphix.com
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: udev-rules-dir
          hostPath:
            path: /etc/udev/rules.d/
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-de-node-sa
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-node-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-de-node-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: csi-de-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-de-node-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io